/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./tracking_script.js":
/*!****************************!*\
  !*** ./tracking_script.js ***!
  \****************************/
/***/ (() => {

eval("// tracking.js\n\nwindow.analytics = {};\nfunction milierTracker(writeKey) {\n  window.analytics._writeKey = writeKey;\n  var script = document.createElement(\"script\");\n  script.type = \"application/javascript\";\n  script.onload = function () {\n    // window.analytics.page();\n  };\n  // script.src = `./demo1.js`;\n  var first = document.getElementsByTagName(\"script\")[0];\n  first.parentNode.insertBefore(script, first);\n  console.log(window.analytics);\n}\n\nfunction users(id, userDetails) {\n  console.log(\"============users=====\", id, \"==name=\", userDetails);\n}\n\nconst sendData = async (eventObject) => {\n  try {\n    const response = await fetch(\n      \"https://a7e6-49-204-116-178.ngrok-free.app/miler_cdn/event\",\n      {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(eventObject),\n      }\n    );\n    const data = await response.json();\n    console.log(\"Response from backend:\", data);\n  } catch (error) {\n    console.error(\"Error sending event:\", error);\n  }\n};\n\n\n(function () {\n  let startTime = Date.now();\n  let previousPath = window.location.pathname;\n\n  const capturePageData = () => {\n    const { host, hostname, href, origin, pathname, port, protocol } =\n      window.location;\n    const hostData = {\n      host,\n      hostname,\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n    };\n    const sessionStorageData = { ...sessionStorage };\n    const localStorageData = { ...localStorage };\n    const timestamp = new Date().toString();\n\n    const pageData = {\n      hostData,\n      sessionStorageData,\n      localStorageData,\n      timestamp,\n    };\n\n    sendData(pageData);\n  };\n\n  const captureFormData = (form, currentPage) => {\n    const formData = new FormData(form);\n    const formInputs = [...formData.entries()];\n\n    const inputData = formInputs.map(([key, value]) => ({ key, value }));\n\n    const formEventData = {\n      Type: 'form',\n      Action: form.action,\n      Method: form.method,\n      inputData,\n      currentPage,\n      timestamp: new Date().toString(),\n    };\n\n    sendData(formEventData);\n  };\n\n  const capturePageTime = () => {\n    const currentTime = Date.now();\n    const elapsedTimeInSeconds = Math.floor((currentTime - startTime) / 1000);\n    const sessionStorageData = { ...sessionStorage };\n    const localStorageData = { ...localStorage };\n    const { href, host, origin, pathname, } =window.location;\n\n    const timeEventData = {\n      Type: 'reload',\n      Page: previousPath,\n      href,\n      host,\n      origin, \n      pathname,\n      TimeSpent: elapsedTimeInSeconds,\n      sessionStorageData,\n      localStorageData,\n      timestamp: new Date().toString(),\n    };\n\n    sendData(timeEventData);\n\n    startTime = currentTime;\n  };\n\n  const handleRouteChange = () => {\n    capturePageTime();\n\n    const currentPath = window.location.pathname;\n    if (currentPath !== previousPath) {\n      capturePageData();\n      previousPath = currentPath;\n    }\n  };\n\n  // window.addEventListener(\"load\", () => {\n  //   capturePageData();\n  // });\n\n  \n  const formatData = (obj, type, currentPage) => {\n    return sendData({ [`${type}`]: obj,  ...currentPage});\n  };\n  window.addEventListener(\"click\", (event) => {\n    event.preventDefault();\n    const clickedElement = event.target;\n    const tagName = clickedElement.tagName.toLowerCase();\n    const { host, hostname, href, origin, pathname, port, protocol } = window.location;\n    const currentPage = {\n      href,\n      origin,\n      pathname,\n      port,\n      protocol,\n    };\n    const sessionStorageData = { ...sessionStorage };\n    const localStorageData = { ...localStorage };\n    \n    if (tagName === \"button\") {\n        if (clickedElement.type == \"submit\" && clickedElement.form) {\n          return captureFormData(clickedElement.form, currentPage);\n        }\n        const { name, id } = clickedElement;\n        formatData({ name, id }, \"button\", currentPage);\n    } else if (tagName === \"a\") {\n        const { tagName, href, target, rel } = clickedElement;\n        formatData({ tagName, href, target, rel }, \"anchor_tag\", currentPage);\n    } else if (tagName === \"img\") {\n        const { src, alt, srcset, sizes, id } = clickedElement;\n        formatData({ src, alt, srcset, sizes, id }, \"image_tag\", currentPage);\n    } else if (tagName === \"input\") {\n        const { type, value, placeholder, name } = clickedElement;\n        formatData({ type, value, placeholder, name }, \"input\", currentPage);\n    } else if (tagName === \"textarea\") {\n      // elementType = \"Textarea Element\";\n        const {name, id, cols, rows} = clickedElement;\n        formatData({ name, id, cols, rows}, \"textarea_tag\", currentPage);\n    } else if (tagName === \"select\") {\n        const { name, id, disabled, value } = clickedElement;\n        formatData({ name, id, disabled, value }, \"select_tag\", currentPage);\n    } else if (tagName === \"label\") {\n        const { name, id, disabled, value } = clickedElement;\n        formatData({ name, id, disabled, value }, \"label_tag\", currentPage);\n    } else if (tagName === \"div\") {\n        const { id='' } = clickedElement;\n        formatData({ id }, \"div_tag\", currentPage);\n    } else if (tagName === \"span\") {\n        const { id='' } = clickedElement;\n        formatData({ id }, \"span_tag\", currentPage);\n    } else if (tagName === \"p\") {\n        const { id='' } = clickedElement;\n        formatData({ id }, \"paragraph_tag\", currentPage);\n    } else if (\n      tagName === \"h1\" ||\n      tagName === \"h2\" ||\n      tagName === \"h3\" ||\n      tagName === \"h4\" ||\n      tagName === \"h5\" ||\n      tagName === \"h6\"\n    ) {\n        const { id='', tagName } = clickedElement;\n        formatData({ id, tagName }, \"header_tag\", currentPage);\n    } else if (tagName === \"ul\" || tagName === \"ol\") {\n        const { id='', tagName } = clickedElement;\n        formatData({ id, tagName }, \"list_tag\", currentPage);\n    } else if (tagName === \"li\") {\n        const { id='', tagName } = clickedElement;\n        formatData({ id, tagName }, \"list_item_tag\", currentPage);\n    } else {\n      const { id, tagName, name } = clickedElement;\n      formatData({ id, tagName, name }, \"unknown_tag\", currentPage);\n    }\n  });\n\n  // Assuming your JSON contains configuration for dashboard actions\n  // const dashboardConfig = type['pages']['dashboard'];\n  // if (dashboardConfig) {\n  //   for (const action in dashboardConfig) {\n  //     const actionType = dashboardConfig[action]['type'];\n\n  //       document.addEventListener(actionType, (event) => {\n  //         event.preventDefault();\n  //         if (actionType == 'submit') {\n  //           return captureFormData(event.target);\n  //         }\n  //         if (actionType == 'focus') {\n  //           const inputValue = event.target.value;\n  //           const name = event.target.name;\n  //           console.log(\"==formData==\", inputValue);\n  //           console.log(\"==name==\", name);\n  //         }\n  //         if(actionType == 'click'){\n  //           const clickedElement = event.target;\n  //         const tagName = clickedElement.tagName.toLowerCase(); // Tag name in lowercase\n  //         const classList = Array.from(clickedElement.classList);\n\n  //         console.log(\"Clicked Element:\", clickedElement);\n  //         console.log(\"Tag Name:\", tagName);\n  //         console.log(\"Class List:\", classList.join(', '));\n  //         }\n\n  //         // You can customize this part to capture specific data based on the action\n  //         // const eventData = {\n  //         //   action,\n  //         //   timestamp: new Date().toString(),\n  //         // };\n\n  //         // return sendData(eventData);\n  //       });\n  //   }\n  // }\n\n  window.addEventListener(\"load\", () => {\n    capturePageTime();\n  });\n\n  // Start capturing page time when the script loads\n  \n})();\n\n\n\n\n\n//# sourceURL=webpack://content-delivery-network/./tracking_script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./tracking_script.js"]();
/******/ 	
/******/ })()
;